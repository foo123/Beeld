###################################################
#
#   The buildtools repository is at:
#   https://github.com/foo123/Beeld
#
###################################################

# A '#' represents a comment and everything after it is skipped
# Lines starting with # or blank lines are skipped
# One line for each setting, no multiple settings on same line, line indentation does not matter
# Blocks with "=[]" define LISTS (arrays)
# Blocks with "={}" define MAPS (hashmaps)
# Blocks with "=[{}]" define ORDEREDMAPS (array of hashmaps)
# Blocks with "=" define KEY-VALUE PAIR
# A key and/or value can be quoted (with ", ' or `, quotes) or unquoted
# Lines with one or multiple '@'s define the end of that many previous blocks


##
##  relative paths are relative to this current configuration file
##

##
## load and use any extra plugins
##
plugins =[{}]  #(ordered map)
    
    # include 'doc' plugin from plugins folder
    "doc" = !plg:doc # include 'doc' plugin from plugins folder

@ # end block


##
## define 2 tasks to execute in order
##
tasks =[{}]  #(ordered map)
    
    # TASK 1 "build": makes the .js file
    build =[{}]  #(ordered map)
        
        src =[]  #(list)
            !tpl:umd-header-single.tpl.js  # include a umd-header template
            
            ### modelview.js, main framework ###
            ./src/header.js
            ./src/utils.js
            ./src/event.js
            ./src/pb.js
            ./src/cache.js
            ./src/types.js
            ./src/model.js
            ./src/view.js
            ./src/footer.js
            
            ### jquery.modelview.js, jQuery/jQueryUI plugin/widget (optional) ###
            ./src/jquery.modelview.js
            
            !tpl:umd-footer.tpl.js  # include a umd-footer template
        @

        
        # extract header from this file
        header = ./src/header.js  #(key-value)

        # do text replacements
        replace =[{}]  #(ordered map)
            "@@ROOT@@" = "this"
            "@@EXPORTS@@" = "exports"
            "@@MODULE_NAME@@" = "ModelView"
            "@@VERSION@@" = "0.51"
        @

        # allow some pre-process to take place (shell scripting)
        process-shell =[] #(list)
            echo ^/^*^*[DOC_MARKDOWN] >> ${IN}
            echo documentation >> ${IN}
            echo [/DOC_MARKDOWN]^*^*^/ >> ${IN}
            type ${IN} > ${OUT}
        @

        # doc plugin: extract documentation from the source
        doc ={}  #(map)
            "startdoc" = "/**[DOC_MARKDOWN]"
            "enddoc" = "[/DOC_MARKDOWN]**/"
            "trimx" = "\\s*\\*[ ]?"
            "output" = "./test-doc.md"
        @

        # allow some post-process to take place (shell scripting)
        process-shell =[]  #(list)
            echo ^/^/ postprocessed >> ${IN}
            echo ^/^/ postprocessed2 >> ${IN}
            type ${IN} > ${OUT}
        @

        out = ./build/modelview.js  #(key-value)
    
    @
    
    # TASK 2 "minify": makes the .min.js file
    minify =[{}]  #(ordered map)
        
        src =[]  #(list)
            ./build/modelview.js
        @

        # Minify the Package
        minify ={}  #(map)
            
            # Options for Node UglifyJS Compiler (if used, default), (mangle and compress)
            "uglifyjs" =[]  #(list)
                -m -c
            @

            # Options for Java Closure Compiler (if used)
            "closure" =[]  #(list)
                "--language_in=ECMASCRIPT5_STRICT"
            @

            # Options for Java YUI Compressor Compiler (if used)
            "yui" =[]  #(list)
                --preserve-semi
            @
        @

        # allow some post-process to take place (shell scripting)
        process-shell =[]  #(list)
            echo ^/^/ postprocessed >> ${IN}
            echo ^/^/ postprocessed2 >> ${IN}
            type ${IN} > ${OUT}
        @
        
        out = ./build/modelview.min.js  #(key-value)
    @
    
@ # end block
